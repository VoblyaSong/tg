import asyncio
import re  
import os
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup
from aiogram import Router
from aiogram.enums import ParseMode

TOKEN = '8117709260:AAGscZ7bD-IC5qoQNdTiA9cYbB0ZxvWaZ6A'
ADMIN_ID = 5091334393

bot = Bot(TOKEN)
dp = Dispatcher()
router = Router()
dp.include_router(router)

countries = ["–§—Ä–∞–Ω—Ü–∏—è", "–ì–µ—Ä–º–∞–Ω–∏—è", "–ì—Ä—É–∑–∏—è", "–ò—Ç–∞–ª–∏—è", "–ò—Å–ø–∞–Ω–∏—è", "–®–≤–µ—Ü–∏—è"]

class VotingStates(StatesGroup):
    choosing_country = State()
    sending_scores = State()

@router.message(F.text == "/start")
async def cmd_start(message: types.Message, state: FSMContext):
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
        [KeyboardButton(text=country)] for country in countries
    ] + [[KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]])
    await state.set_state(VotingStates.choosing_country)
    await message.answer("–ñ—é—Ä–∏ –∫–∞–∫–æ–π —Å—Ç—Ä–∞–Ω—ã –≤—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç–µ?", reply_markup=keyboard)

    @router.message(F.text.lower() == "–æ—Ç–º–µ–Ω–∞")
    async def cancel_action(message: types.Message, state: FSMContext):
        await state.clear()
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –≤–≤–µ–¥–∏—Ç–µ /start",
                             reply_markup=types.ReplyKeyboardRemove())

@router.message(VotingStates.choosing_country)
async def handle_country_choice(message: types.Message, state: FSMContext):
    if message.text not in countries:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞'.")
        return
    await state.update_data(country=message.text)
    await state.set_state(VotingStates.sending_scores)
    await message.answer(
        "–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–≤–æ–∏ –≥–æ–ª–æ—Å–∞ –ø–æ —Å–∏—Å—Ç–µ–º–µ –ï–≤—Ä–æ–≤–∏–¥–µ–Ω–∏—è (1-8, 10, 12)\n\n"
        "–§–æ—Ä–º–∞—Ç:\n12 - –°—Ç—Ä–∞–Ω–∞\n10 - –°—Ç—Ä–∞–Ω–∞\n...\n\n",
        reply_markup=types.ReplyKeyboardRemove()
    )


@router.message(VotingStates.sending_scores)
async def handle_scores(message: types.Message, state: FSMContext):
    text = message.text.strip()
    pattern = r"(1[0-2]|[1-9])\s*-\s*(.+)"
    matches = re.findall(pattern, text)

    expected_points = {'12', '10', '8', '7', '6', '5', '4', '3', '2', '1'}
    submitted_points = set()
    countries_voted = []

    for point, country in matches:
        submitted_points.add(point)
        countries_voted.append(country.strip().lower())

    missing = sorted(expected_points - submitted_points, reverse=True)

    if missing:
        await message.answer(f"‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Å–µ –±–∞–ª–ª—ã! –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç: {', '.join(missing)}")
        return

    duplicates = [country for country in countries_voted if countries_voted.count(country) > 1]
    if duplicates:
        unique_duplicates = sorted(set(duplicates))
        await message.answer(f"‚ö†Ô∏è –°—Ç—Ä–∞–Ω—ã –Ω–µ –¥–æ–ª–∂–Ω—ã –ø–æ–≤—Ç–æ—Ä—è—Ç—å—Å—è. –ü–æ–≤—Ç–æ—Ä—ã: {', '.join(unique_duplicates)}")
        return
    
user_data = await state.get_data()
jury_country = user_data.get('country', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
user_id = message.from_user.id

votes_text = f"üó≥ –ù–æ–≤–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ!\n\n–ñ—é—Ä–∏: {jury_country} (ID: {user_id})\n"
votes_text += "\n".join([f"{point} - {country.strip()}" for point, country in matches])

await bot.send_message(chat_id=ADMIN_ID, text=votes_text)

await message.answer("–°–ø–∞—Å–∏–±–æ, –±–∞–ª–ª—ã –ø—Ä–∏–Ω—è—Ç—ã.")
await state.clear()


async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
